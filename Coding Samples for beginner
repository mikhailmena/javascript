//Given a string input and a character, "countCharacter" returns the number of occurences of a given character in the given string.

function countCharacter(str, char) {
  var stringArray = str.split('')
  var count = 0
  for (var i = 0; i < stringArray.length; i++) {
    if (stringArray[i] === char)  {
    count++ 
      }
  }
return count
}
var output = countCharacter('I am a hacker', 'a');
console.log(output); // --> 3


//Given an array, "getAllElementsButFirst" returns an array with all the elements but the first.

function getAllElementsButFirst(array) {
  // your code here
  var answer = array.slice(1)
  return answer
  /* START SOLUTION */

  /* END SOLUTION */
}
var input = [1, 2, 3, 4];
var output = getAllElementsButFirst(input);
console.log(output); // --> [2, 3, 4]

//Given a string, "countWords" returns an object where each key is a word in the given string, with its value being how many times that word appeared in the given string.

//Notes:

//If given an empty string, it should return an empty object.

// Given any object, "removeEvenValues" removes any properties whose values are ven numbers.
// Do this in place and return the original object, do not construct a cloned object that omits the properties
// NOTE: Rember, we are talking about any object, not just the one shown in the sample.

function removeEvenValues(obj) {
    for (var key in obj) {                          // We use the for...in to loop through the object
        if (typeof obj[key] === 'number') {         // We type check if it's properties is a number
            if (obj[key] % 2 === 0) {               // If true, we then che k if it's an even number
                delete obj[key]                     // If true, we delete the properties
            } else {
                obj[key];                           // Else, we do nothing...
            }
        } else {
            obj[key]                                // If not a number, we do nothing...
        }
    }
    return obj;                                     // Then return the modified object
}

var obj = {
    a: 2,
    b: 3,
    c: 4
}

removeEvenValues(obj);

console.log(obj); // --> { b: 3 }

function countWords(str) {
  var output = {}
  if (str.length > 1) {
    var words = str.split(' ')
    for (var word of words) {
      var counter = 0
      for (var w2 of words) {
        if(word == w2) {
          counter++
        }
      }
    output[word] = counter;
    }
  }
  return output

}
var output = countWords('ask a bunch get a bunch');
console.log(output); // --> {ask: 1, a: 2, bunch: 2, get: 1}


**Given two objects, "extend" adds properties from the 2nd object to the 1st object.

Notes:

Add any keys that are not in the 1st object.
If the 1st object already has a given key, ignore it (do not overwrite the property value).
Do not modify the 2nd object at all.

// adds properties FROM the 2nd object TO the 1st object.
function extend(obj1, obj2) {
    var key = ''
  for (key in obj2) {
    if (obj1[key]) {  // Check if obj1 key matches obj2 keys
      obj2[key]    // If match we do nothing...
    } else {    // If no match, we add obj2 key to obj1 key
      obj1[key] = obj2[key]
    }
  }
  return obj1    // Once we complete the loop through obj2, we return obj1 after keys have been added
}

var obj1 = {
  a: 1,
  b: 2
};
var obj2 = {
  b: 4,
  c: 3
};

extend(obj1, obj2);

console.log(obj1); // --> {a: 1, b: 2, c: 3}
console.log(obj2); // --> {b: 4, c: 3}

Write a function called "removeArrayValues".

Given an object, "removeArrayValues" removes any properties whose values are arrays.
function removeArrayValues(obj) {
  // your code here
  //var array = []
  var key = ''
  for (key in obj) {
      if (Array.isArray(obj[key])) {
          delete obj[key]
      }
  } 
  return obj

}
var obj = {
  a: [1, 3, 4],
  b: 2,
  c: ['hi', 'there']
}
removeArrayValues(obj);
console.log(obj); // --> { b: 2 }


Write a function called "removeNumberValues".

Given an object, "removeNumberValues" removes any properties whose values are numbers.

function removeNumberValues(obj) {
  // your code here
  var key = ''
  for (key in obj) {
      if (typeof(obj[key]) === "number" ) {
          delete obj[key]
      }
  }
  return obj
  /* START SOLUTION */

  /* END SOLUTION */
}
var obj = {
  a: 2,
  b: 'remaining',
  c: 4
};
removeNumberValues(obj);
console.log(obj); // --> { b: 'remaining' }


Given an array and an element, "addToBackNew" returns a clone of the given array, with the given element added to the end.

function addToFrontOfNew(arr, element) {
  // your code here
  var newArray = arr.slice()
  newArray.unshift(element)
  return newArray
  
}
var input = [1, 2];

var output = addToFrontOfNew(input, 3);

console.log(output); // --> [3, 1, 2];

console.log(input); //--> [1, 2]


Write a function called "select".

Given an array and an object, "select" returns a new object whose properties are those in the given object AND whose keys are present in the given array.

Notes:

If keys are present in the given array, but are not in the given object, it should ignore them.
It does not modify the passed in object.


function select(arr, obj) {

  var newObject = {} //create a new object
  for (key in obj) { //iterate for each key in the original object
    for (var i = 0; i < arr.length; i++){ //iterate through each element in the array
      if (arr[i] === key) { // if element in the array matches a key in the object
        newObject[key] = obj[key]; //make the key in the newObject the key from the original object
          }
      }

  }

 return newObject
}
var arr = ['a', 'c', 'e'];
var obj = {
  a: 1,
  b: 2,
  c: 3,
  d: 4
};
var output = select(arr, obj);
console.log(output); // --> { a: 1, c: 3 }
